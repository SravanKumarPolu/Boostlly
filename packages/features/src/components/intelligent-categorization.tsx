import { useState, useMemo } from "react";
import {
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Badge,
  Input,
} from "@boostlly/ui";
import { getCategoryDisplay } from "@boostlly/core/utils/category-display";
import {
  Brain,
  Tag,
  Search,
  Sparkles,
  Plus,
  CheckCircle,
  Target,
  TrendingUp,
  Lightbulb,
} from "lucide-react";
import { Quote, UserPreferences } from "@boostlly/core";

interface IntelligentCategorizationProps {
  userQuotes: Quote[];
  userPreferences: UserPreferences;
  onQuoteUpdate: (quoteId: string, updates: Partial<Quote>) => void;
  onCategoryCreate: (
    category: string,
    description: string,
    color: string,
  ) => void;
}

interface CategorySuggestion {
  category: string;
  confidence: number;
  reasons: string[];
  color: string;
}

interface SmartCategory {
  name: string;
  description: string;
  color: string;
  keywords: string[];
  quoteCount: number;
  lastUsed: Date;
  autoGenerated: boolean;
}

export function IntelligentCategorization({
  userQuotes,
  onQuoteUpdate,
  onCategoryCreate,
}: IntelligentCategorizationProps) {
  const [activeTab, setActiveTab] = useState<
    "suggestions" | "categories" | "training" | "insights"
  >("suggestions");
  const [selectedQuote, setSelectedQuote] = useState<Quote | null>(null);
  const [newCategory, setNewCategory] = useState({
    name: "",
    description: "",
    color: "#3B82F6",
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [filterCategory, setFilterCategory] = useState<string>("all");

  // Intelligent category suggestions using client-side NLP
  const categorySuggestions = useMemo(() => {
    if (!selectedQuote) return [];

    const suggestions: CategorySuggestion[] = [];
    const text = selectedQuote.text.toLowerCase();

    // Predefined category patterns with confidence scoring
    const categoryPatterns = [
      {
        name: "motivation",
        keywords: [
          "motivation",
          "inspire",
          "success",
          "achieve",
          "goal",
          "dream",
          "ambition",
          "drive",
          "passion",
          "determination",
        ],
        confidence: 0.9,
        color: "#10B981",
      },
      {
        name: "wisdom",
        keywords: [
          "wisdom",
          "knowledge",
          "learn",
          "understand",
          "experience",
          "insight",
          "truth",
          "philosophy",
          "understanding",
        ],
        confidence: 0.85,
        color: "#3B82F6",
      },
      {
        name: "love",
        keywords: [
          "love",
          "heart",
          "romance",
          "affection",
          "relationship",
          "passion",
          "emotion",
          "feeling",
          "care",
          "devotion",
        ],
        confidence: 0.8,
        color: "#EF4444",
      },
      {
        name: "life",
        keywords: [
          "life",
          "living",
          "existence",
          "journey",
          "path",
          "adventure",
          "experience",
          "moment",
          "present",
          "future",
        ],
        confidence: 0.75,
        color: "#8B5CF6",
      },
      {
        name: "success",
        keywords: [
          "success",
          "achievement",
          "victory",
          "win",
          "triumph",
          "accomplish",
          "excel",
          "prosper",
          "thrive",
          "conquer",
        ],
        confidence: 0.8,
        color: "#F59E0B",
      },
    ];

    // Analyze text and calculate confidence scores
    categoryPatterns.forEach((pattern) => {
      let score = 0;
      const reasons: string[] = [];

      // Keyword matching
      pattern.keywords.forEach((keyword) => {
        if (text.includes(keyword)) {
          score += 0.1;
          reasons.push(`Contains keyword: "${keyword}"`);
        }
      });

      // Text length and complexity analysis
      if (text.length > 100 && pattern.name === "Wisdom") {
        score += 0.1;
        reasons.push("Long, thoughtful text suggests wisdom");
      }

      if (text.length < 50 && pattern.name === "Motivation") {
        score += 0.1;
        reasons.push("Short, punchy text suggests motivation");
      }

      // Final confidence calculation
      const finalConfidence = Math.min(0.95, pattern.confidence + score);

      if (finalConfidence > 0.3) {
        suggestions.push({
          category: pattern.name,
          confidence: Math.round(finalConfidence * 100) / 100,
          reasons: reasons.slice(0, 3),
          color: pattern.color,
        });
      }
    });

    return suggestions.sort((a, b) => b.confidence - a.confidence).slice(0, 5);
  }, [selectedQuote]);

  // Get random color for categories
  const getRandomColor = (): string => {
    const colors = [
      "#3B82F6",
      "#10B981",
      "#F59E0B",
      "#EF4444",
      "#8B5CF6",
      "#EC4899",
      "#6366F1",
      "#06B6D4",
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  };

  // Extract keywords from text using simple NLP techniques
  const extractKeywords = (text: string): string[] => {
    const words = text
      .toLowerCase()
      .replace(/[^\w\s]/g, "")
      .split(/\s+/)
      .filter((word) => word.length > 3);

    // Simple frequency analysis
    const wordCount: { [key: string]: number } = {};
    words.forEach((word) => {
      wordCount[word] = (wordCount[word] || 0) + 1;
    });

    return Object.entries(wordCount)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([word]) => word);
  };

  // Smart categories management
  const smartCategories = useMemo(() => {
    const categories: { [key: string]: SmartCategory } = {};

    // Extract categories from existing quotes
    userQuotes.forEach((quote) => {
      if (quote.category) {
        if (!categories[quote.category]) {
          categories[quote.category] = {
            name: quote.category,
            description: `Auto-generated category for ${quote.category.toLowerCase()} quotes`,
            color: getRandomColor(),
            keywords: extractKeywords(quote.text),
            quoteCount: 0,
            lastUsed: new Date(),
            autoGenerated: true,
          };
        }
        categories[quote.category].quoteCount++;
      }
    });

    return Object.values(categories);
  }, [userQuotes]);

  // Apply category suggestion
  const applyCategory = (quoteId: string, category: string) => {
    onQuoteUpdate(quoteId, { category });
    setSelectedQuote(null);
  };

  // Create new category
  const handleCreateCategory = () => {
    if (newCategory.name.trim()) {
      onCategoryCreate(
        newCategory.name,
        newCategory.description,
        newCategory.color,
      );
      setNewCategory({ name: "", description: "", color: "#3B82F6" });
    }
  };

  // Filter quotes by category
  const filteredQuotes = useMemo(() => {
    let quotes = userQuotes;

    if (filterCategory !== "all") {
      quotes = quotes.filter((q) => q.category === filterCategory);
    }

    if (searchTerm) {
      quotes = quotes.filter(
        (q) =>
          q.text.toLowerCase().includes(searchTerm.toLowerCase()) ||
          q.author?.toLowerCase().includes(searchTerm.toLowerCase()),
      );
    }

    return quotes;
  }, [userQuotes, filterCategory, searchTerm]);

  const renderSuggestionsTab = () => (
    <div className="space-y-6">
      {/* Quote Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="w-5 h-5" />
            Select Quote for Categorization
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3 max-h-60 overflow-y-auto">
            {filteredQuotes.slice(0, 10).map((quote) => (
              <div
                key={quote.id}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  selectedQuote?.id === quote.id
                    ? "border-border bg-accent/30"
                    : "border-border hover:bg-accent/20"
                }`}
                onClick={() => setSelectedQuote(quote)}
              >
                <p className="text-sm mb-2 line-clamp-2">"{quote.text}"</p>
                {quote.author && (
                  <p className="text-xs text-muted-foreground">
                    — {quote.author}
                  </p>
                )}
                {quote.category && (
                  <Badge variant="outline" className="text-xs mt-2">
                    {getCategoryDisplay(quote.category)}
                  </Badge>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Category Suggestions */}
      {selectedQuote && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Brain className="w-5 h-5" />
              AI-Powered Category Suggestions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="mb-4 p-3 bg-card rounded-lg border border-border">
              <p className="text-sm mb-2">"{selectedQuote.text}"</p>
              {selectedQuote.author && (
                <p className="text-xs text-muted-foreground">
                  — {selectedQuote.author}
                </p>
              )}
            </div>

            <div className="space-y-3">
              {categorySuggestions.map((suggestion, index) => (
                <div
                  key={index}
                  className="flex items-center justify-between p-3 bg-card rounded-lg border border-border"
                >
                  <div className="flex items-center gap-3">
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{ backgroundColor: suggestion.color }}
                    />
                    <div>
                      <div className="font-medium">{suggestion.category}</div>
                      <div className="text-xs text-muted-foreground">
                        Confidence: {Math.round(suggestion.confidence * 100)}%
                      </div>
                      <div className="text-xs text-muted-foreground mt-1">
                        {suggestion.reasons.join(", ")}
                      </div>
                    </div>
                  </div>
                  <Button
                    size="sm"
                    onClick={() =>
                      applyCategory(selectedQuote.id, suggestion.category)
                    }
                    className="text-xs"
                  >
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Apply
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );

  const renderCategoriesTab = () => (
    <div className="space-y-6">
      {/* Create New Category */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Plus className="w-5 h-5" />
            Create Smart Category
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium text-foreground">
                Category Name
              </label>
              <Input
                value={newCategory.name}
                onChange={(e) =>
                  setNewCategory((prev) => ({ ...prev, name: e.target.value }))
                }
                placeholder="e.g., Morning Motivation"
                className="mt-1"
              />
            </div>
            <div>
              <label className="text-sm font-medium text-foreground">
                Color
              </label>
              <Input
                type="color"
                value={newCategory.color}
                onChange={(e) =>
                  setNewCategory((prev) => ({ ...prev, color: e.target.value }))
                }
                className="mt-1 h-10"
              />
            </div>
          </div>
          <div>
            <label className="text-sm font-medium text-foreground">
              Description
            </label>
            <textarea
              value={newCategory.description}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                setNewCategory((prev) => ({
                  ...prev,
                  description: e.target.value,
                }))
              }
              placeholder="Describe what this category represents..."
              className="mt-1 w-full px-3 py-2 bg-background border border-border rounded-lg text-foreground text-sm resize-none"
              rows={3}
            />
          </div>
          <Button onClick={handleCreateCategory} className="w-full">
            <Plus className="w-4 h-4 mr-2" />
            Create Category
          </Button>
        </CardContent>
      </Card>

      {/* Smart Categories Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {smartCategories.map((category) => (
          <Card key={category.name} className="relative">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm flex items-center gap-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: category.color }}
                  />
                  {category.name}
                </CardTitle>
                {category.autoGenerated && (
                  <Badge variant="outline" className="text-xs">
                    <Sparkles className="w-3 h-3 mr-1" />
                    AI
                  </Badge>
                )}
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                {category.description}
              </p>
              <div className="space-y-2">
                <div className="flex items-center justify-between text-xs">
                  <span className="text-muted-foreground">Quotes</span>
                  <span className="text-foreground font-medium">
                    {category.quoteCount}
                  </span>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-muted-foreground">Keywords</span>
                  <span className="text-foreground font-medium">
                    {category.keywords.length}
                  </span>
                </div>
              </div>
              <div className="mt-3 flex flex-wrap gap-1">
                {category.keywords.slice(0, 3).map((keyword, index) => (
                  <Badge key={index} variant="outline" className="text-xs">
                    {keyword}
                  </Badge>
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );

  const renderTrainingTab = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5" />
            AI Training Insights
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="p-4 bg-gradient-to-r from-blue-900/20 to-purple-900/20 rounded-lg border border-blue-500/20">
              <h3 className="font-medium text-blue-300 mb-2">How It Works</h3>
              <p className="text-sm text-blue-200">
                Our intelligent categorization system learns from your quotes
                using advanced pattern recognition:
              </p>
              <ul className="text-xs text-blue-300 mt-2 space-y-1">
                <li>• Keyword analysis and frequency counting</li>
                <li>• Text length and complexity analysis</li>
                <li>• Contextual relationship learning</li>
              </ul>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="p-4 bg-gradient-to-r from-green-900/20 to-green-600/20 rounded-lg border border-green-500/20">
                <h3 className="font-medium text-green-300 mb-2">
                  Current Learning
                </h3>
                <div className="text-sm text-green-200 space-y-1">
                  <div>Total quotes analyzed: {userQuotes.length}</div>
                  <div>Categories discovered: {smartCategories.length}</div>
                  <div>
                    Keywords extracted:{" "}
                    {smartCategories.reduce(
                      (sum, cat) => sum + cat.keywords.length,
                      0,
                    )}
                  </div>
                </div>
              </div>

              <div className="p-4 bg-gradient-to-r from-yellow-900/20 to-yellow-600/20 rounded-lg border border-yellow-500/20">
                <h3 className="font-medium text-yellow-300 mb-2">
                  Improvement Tips
                </h3>
                <ul className="text-xs text-yellow-300 space-y-1">
                  <li>• Add more quotes for better learning</li>
                  <li>• Manually categorize some quotes</li>
                  <li>• Create custom categories</li>
                </ul>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderInsightsTab = () => (
    <div className="space-y-6">
      {/* Categorization Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4 text-center">
            <Tag className="w-8 h-8 mx-auto text-foreground mb-2" />
            <div className="text-2xl font-bold text-foreground">
              {userQuotes.filter((q) => q.category).length}
            </div>
            <div className="text-xs text-muted-foreground">
              Categorized Quotes
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 text-center">
            <Sparkles className="w-8 h-8 mx-auto text-foreground mb-2" />
            <div className="text-2xl font-bold text-foreground">
              {smartCategories.filter((c) => c.autoGenerated).length}
            </div>
            <div className="text-xs text-muted-foreground">AI Categories</div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4 text-center">
            <Target className="w-8 h-8 mx-auto text-foreground mb-2" />
            <div className="text-2xl font-bold text-foreground">
              {Math.round(
                (userQuotes.filter((q) => q.category).length /
                  userQuotes.length) *
                  100,
              )}
              %
            </div>
            <div className="text-xs text-muted-foreground">
              Categorization Rate
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Category Distribution */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            Category Distribution
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {smartCategories
              .sort((a, b) => b.quoteCount - a.quoteCount)
              .slice(0, 8)
              .map((category) => (
                <div
                  key={category.name}
                  className="flex items-center justify-between"
                >
                  <div className="flex items-center gap-3">
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{ backgroundColor: category.color }}
                    />
                    <span className="text-sm capitalize">{category.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-20 bg-muted rounded-full h-2">
                      <div
                        className="h-2 rounded-full"
                        style={{
                          width: `${(category.quoteCount / Math.max(...smartCategories.map((c) => c.quoteCount))) * 100}%`,
                          backgroundColor: category.color,
                        }}
                      />
                    </div>
                    <span className="text-sm font-medium">
                      {category.quoteCount}
                    </span>
                  </div>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-bold text-foreground flex items-center gap-2">
            <Brain className="w-6 h-6 text-blue-400" />
            Intelligent Categorization
          </h2>
          <p className="text-sm text-muted-foreground">
            AI-powered quote categorization using advanced pattern recognition
          </p>
        </div>

        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <div className="flex items-center gap-1">
            <Tag className="w-4 h-4" />
            {smartCategories.length} smart categories
          </div>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <Input
            placeholder="Search quotes..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>
        <div className="flex gap-2">
          <select
            value={filterCategory}
            onChange={(e) => setFilterCategory(e.target.value)}
            className="px-3 py-2 bg-background border border-border rounded-lg text-sm text-foreground"
          >
            <option value="all">All Categories</option>
            {smartCategories.map((cat) => (
              <option key={cat.name} value={cat.name}>
                {cat.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="flex items-center gap-1 bg-background/5 backdrop-blur-sm rounded-lg p-1 border border-border overflow-x-auto">
        {[
          { id: "suggestions", label: "Suggestions", icon: Lightbulb },
          { id: "categories", label: "Categories", icon: Tag },
          { id: "training", label: "AI Training", icon: Brain },
          { id: "insights", label: "Insights", icon: TrendingUp },
        ].map((tab) => {
          const Icon = tab.icon;
          return (
            <Button
              key={tab.id}
              variant={activeTab === tab.id ? "gradient" : "ghost"}
              size="sm"
              onClick={() => setActiveTab(tab.id as any)}
              className="text-xs flex items-center gap-1"
            >
              <Icon className="w-3 h-3" />
              {tab.label}
            </Button>
          );
        })}
      </div>

      {/* Tab Content */}
      <div className="min-h-[500px]">
        {activeTab === "suggestions" && renderSuggestionsTab()}
        {activeTab === "categories" && renderCategoriesTab()}
        {activeTab === "training" && renderTrainingTab()}
        {activeTab === "insights" && renderInsightsTab()}
      </div>
    </div>
  );
}
